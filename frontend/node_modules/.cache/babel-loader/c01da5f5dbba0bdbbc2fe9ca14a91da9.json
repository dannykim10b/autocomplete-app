{"ast":null,"code":"var _jsxFileName = \"/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Autocomplete.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Autocomplete() {\n  _s();\n\n  const [searchValue, setSearchValue] = useState('');\n  const [allStudents, setAllStudents] = useState([]);\n  const [suggestions, setSuggestions] = useState([]); // const [suggestionLength, setSuggestionLength] = useState(0)\n\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [apiDone, setApiDone] = useState(false);\n  useEffect(() => {\n    let autocompleteSuggestions;\n\n    if (showSuggestions && searchValue) {\n      if (suggestions.length > 0) {\n        autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: suggestions.map((suggestion, idx) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: handleSuggestionClick,\n              children: `${suggestion.firstName} ${suggestion.lastName}`\n            }, `${suggestion.firstName}-${suggestion.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this);\n      } else {\n        autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Matches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this);\n      }\n    }\n  }, [searchValue]);\n\n  const handleSuggestionClick = e => {\n    setSearchValue(e.target.innerText);\n    setShowSuggestions(false);\n  };\n\n  const handleInputChange = e => {\n    setApiDone(false);\n    console.log(\"start\");\n    axios.get('/students', {\n      params: {\n        search: e.target.value\n      }\n    }).then(resp => {\n      const allStudents = resp.data.students;\n      console.log(allStudents);\n      setAllStudents(allStudents);\n      const searchSuggestions = allStudents.sort((a, b) => a.firstName.localeCompare(b.firstName) || a.lastName.localeCompare(b.lastName)); // const searchSuggestions = allStudents.filter(\n      //     suggestion => (\n      //         suggestion.firstName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1 || suggestion.lastName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1\n      //     )\n      // )\n\n      setSuggestions(searchSuggestions);\n      console.log({\n        'search suggestions': searchSuggestions\n      });\n      setApiDone(true);\n    });\n    setSearchValue(e.target.value);\n    setShowSuggestions(true); // const searchSuggestions = allStudents.sort((a,b) => a.firstName.localeCompare(b.firstName) || a.lastName.localeCompare(b.lastName))\n    // // const searchSuggestions = allStudents.filter(\n    // //     suggestion => (\n    // //         suggestion.firstName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1 || suggestion.lastName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1\n    // //     )\n    // // )\n    // setSearchValue(e.target.value)\n    // setSuggestions(searchSuggestions)\n    // console.log({'search suggestions': searchSuggestions})\n    // setShowSuggestions(true)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Student Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search-bar\",\n      type: \"search\",\n      value: searchValue,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), autocompleteSuggestions]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Autocomplete, \"RBt7oTKYIi62PJ6E5mSZeG9Gj58=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js"],"names":["React","useEffect","useState","axios","Autocomplete","searchValue","setSearchValue","allStudents","setAllStudents","suggestions","setSuggestions","showSuggestions","setShowSuggestions","apiDone","setApiDone","autocompleteSuggestions","length","map","suggestion","idx","handleSuggestionClick","firstName","lastName","id","e","target","innerText","handleInputChange","console","log","get","params","search","value","then","resp","data","students","searchSuggestions","sort","a","b","localeCompare"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport './Autocomplete.css'\n\nfunction Autocomplete() {\n    const [searchValue, setSearchValue] = useState('')\n    const [allStudents, setAllStudents] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    // const [suggestionLength, setSuggestionLength] = useState(0)\n    const [showSuggestions, setShowSuggestions] = useState(false)\n    const [apiDone, setApiDone] = useState(false)\n\n    useEffect(() => {\n        let autocompleteSuggestions\n\n        if (showSuggestions && searchValue) {\n            if (suggestions.length > 0) {\n                autocompleteSuggestions = (\n                    <ul>\n                        {suggestions.map((suggestion, idx) => {\n                            return (\n                                <li key={`${suggestion.firstName}-${suggestion.id}`} onClick={handleSuggestionClick}>{`${suggestion.firstName} ${suggestion.lastName}`}</li>\n                            )\n                        })}\n                    </ul>\n                )\n            }\n            else {\n                autocompleteSuggestions = (\n                        <p>No Matches</p>\n                )\n            }\n        }\n    }, [searchValue])\n\n    const handleSuggestionClick = (e) => {\n        setSearchValue(e.target.innerText)\n        setShowSuggestions(false)\n    }\n\n    const handleInputChange = (e) => {\n        setApiDone(false)\n        console.log(\"start\")\n        axios.get('/students', { params: {\n            search: e.target.value\n        }})\n        .then(resp => {\n        const allStudents = resp.data.students\n        console.log(allStudents)\n        setAllStudents(allStudents)\n\n        const searchSuggestions = allStudents.sort((a,b) => a.firstName.localeCompare(b.firstName) || a.lastName.localeCompare(b.lastName))\n\n        // const searchSuggestions = allStudents.filter(\n        //     suggestion => (\n        //         suggestion.firstName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1 || suggestion.lastName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1\n        //     )\n        // )\n        setSuggestions(searchSuggestions)\n        console.log({'search suggestions': searchSuggestions})\n        setApiDone(true)\n        })\n\n        setSearchValue(e.target.value)\n        setShowSuggestions(true)\n\n\n\n        // const searchSuggestions = allStudents.sort((a,b) => a.firstName.localeCompare(b.firstName) || a.lastName.localeCompare(b.lastName))\n\n        // // const searchSuggestions = allStudents.filter(\n        // //     suggestion => (\n        // //         suggestion.firstName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1 || suggestion.lastName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1\n        // //     )\n        // // )\n        // setSearchValue(e.target.value)\n        // setSuggestions(searchSuggestions)\n        // console.log({'search suggestions': searchSuggestions})\n        // setShowSuggestions(true)\n    }\n\n    return (\n        <div className=\"search-box\">\n            <h1 className=\"title\">Student Search</h1>\n            <input className='search-bar' type=\"search\" value={searchValue} onChange={handleInputChange}></input>\n            {autocompleteSuggestions}\n        </div>\n    )\n}\n\nexport default Autocomplete"]},"metadata":{},"sourceType":"module"}