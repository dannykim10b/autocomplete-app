{"ast":null,"code":"var _jsxFileName = \"/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Autocomplete() {\n  _s();\n\n  const [value, setValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  useEffect(() => {\n    axios.get('/students').then(resp => setSuggestions(resp.data.test2));\n    console.log(suggestions);\n  }, []);\n\n  const handleSuggestionClick = e => {\n    setValue(e.target.innerText);\n  };\n\n  const getSuggestions = suggestions.map((suggestion, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      onClick: handleSuggestionClick,\n      children: suggestion\n    }, suggestion, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  });\n\n  const handleInputChange = e => {\n    setValue(e.target.value);\n\n    if (value.length > 0) {\n      setShowSuggestions(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"HI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"search\",\n      value: value,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), getSuggestions]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Autocomplete, \"nczn+kPcTJPHi+tBz7oVjgaS+4w=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js"],"names":["React","useEffect","useState","axios","Autocomplete","value","setValue","suggestions","setSuggestions","showSuggestions","setShowSuggestions","get","then","resp","data","test2","console","log","handleSuggestionClick","e","target","innerText","getSuggestions","map","suggestion","idx","handleInputChange","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,KAAK,CAACQ,GAAN,CAAU,WAAV,EACCC,IADD,CACOC,IAAI,IAAIL,cAAc,CAACK,IAAI,CAACC,IAAL,CAAUC,KAAX,CAD7B;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,WAAZ;AACH,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMW,qBAAqB,GAAIC,CAAD,IAAO;AACjCb,IAAAA,QAAQ,CAACa,CAAC,CAACC,MAAF,CAASC,SAAV,CAAR;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAGf,WAAW,CAACgB,GAAZ,CAAgB,CAACC,UAAD,EAAaC,GAAb,KAAqB;AACxD,wBAAO;AAAqB,MAAA,OAAO,EAAEP,qBAA9B;AAAA,gBAAsDM;AAAtD,OAASA,UAAT;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFsB,CAAvB;;AAIA,QAAME,iBAAiB,GAAIP,CAAD,IAAO;AAC7Bb,IAAAA,QAAQ,CAACa,CAAC,CAACC,MAAF,CAASf,KAAV,CAAR;;AACA,QAAGA,KAAK,CAACsB,MAAN,GAAe,CAAlB,EAAqB;AACjBjB,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;AACJ,GALD;;AAOA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAEL,KAA5B;AAAmC,MAAA,QAAQ,EAAEqB;AAA7C;AAAA;AAAA;AAAA;AAAA,YAFJ,EAIKJ,cAJL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAlCQlB,Y;;KAAAA,Y;AAoCT,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nfunction Autocomplete() {\n    const [value, setValue] = useState('')\n    const [suggestions, setSuggestions] = useState([])\n    const [showSuggestions, setShowSuggestions] = useState(false)\n\n    useEffect(() => {\n        axios.get('/students')\n        .then( resp => setSuggestions(resp.data.test2) )\n        console.log(suggestions)\n    }, [])\n\n    const handleSuggestionClick = (e) => {\n        setValue(e.target.innerText)\n    }\n\n    const getSuggestions = suggestions.map((suggestion, idx) => {\n        return <ul key={suggestion} onClick={handleSuggestionClick}>{suggestion}</ul>\n    })\n\n    const handleInputChange = (e) => {\n        setValue(e.target.value)\n        if(value.length > 0) {\n            setShowSuggestions(true)\n        }\n    }\n\n    return (\n        <div>\n            <h1>HI</h1>\n            <input type=\"search\" value={value} onChange={handleInputChange}></input>\n\n            {getSuggestions}\n        </div>\n    )\n}\n\nexport default Autocomplete"]},"metadata":{},"sourceType":"module"}