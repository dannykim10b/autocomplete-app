{"ast":null,"code":"var _jsxFileName = \"/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Autocomplete.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Autocomplete() {\n  _s();\n\n  const [searchValue, setSearchValue] = useState('');\n  const [allStudents, setAllStudents] = useState([]);\n  const [suggestions, setSuggestions] = useState([]); // const [suggestionLength, setSuggestionLength] = useState(0)\n\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [apiDone, setApiDone] = useState(false);\n  const [searchCleared, setSearchCleared] = useState(false);\n\n  const handleSuggestionClick = e => {\n    setSearchValue(e.target.innerText);\n    setShowSuggestions(false);\n  };\n\n  let autocompleteSuggestions;\n\n  if (showSuggestions && searchValue) {\n    if (suggestions.length > 0) {\n      autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: suggestions.map((suggestion, idx) => {\n          const name = suggestion.name;\n          let indexOfSubstring;\n\n          if (searchValue.length == 1) {\n            indexOfSubstring = 0;\n            const splitName = name.split(name[0]);\n          } else {\n            indexOfSubstring = name.indexOf(searchValue);\n          }\n\n          console.log(splitName);\n          console.log(indexOfSubstring);\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"suggestion\",\n            onClick: handleSuggestionClick,\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 33\n            }, this)\n          }, `${suggestion.name}-${suggestion.id}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this);\n    } else {\n      autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Matches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n  const handleInputChange = e => {\n    console.log(\"start\");\n    setApiDone(false);\n\n    if (e.target.value != \"\") {\n      setSearchCleared(false);\n      axios.get('/students', {\n        params: {\n          search: e.target.value\n        }\n      }).then(resp => {\n        const allStudents = resp.data.students;\n        console.log(allStudents);\n        setAllStudents(allStudents);\n        const searchSuggestions = allStudents.sort((a, b) => a.name.localeCompare(b.name));\n        setSuggestions(searchSuggestions);\n        setApiDone(true);\n        setShowSuggestions(true);\n      });\n    } else setSearchCleared(true);\n\n    setSearchValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Student Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search-bar\",\n      type: \"search\",\n      value: searchValue,\n      onChange: handleInputChange,\n      placeholder: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), !searchCleared && autocompleteSuggestions]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Autocomplete, \"PzHJUMP0dn4R3sHl8EeuCN4XBtA=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js"],"names":["React","useEffect","useState","axios","Autocomplete","searchValue","setSearchValue","allStudents","setAllStudents","suggestions","setSuggestions","showSuggestions","setShowSuggestions","apiDone","setApiDone","searchCleared","setSearchCleared","handleSuggestionClick","e","target","innerText","autocompleteSuggestions","length","map","suggestion","idx","name","indexOfSubstring","splitName","split","indexOf","console","log","id","handleInputChange","value","get","params","search","then","resp","data","students","searchSuggestions","sort","a","b","localeCompare"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACpB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C,CAHoB,CAIpB;;AACA,QAAM,CAACS,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,KAAD,CAAlD;;AAEA,QAAMe,qBAAqB,GAAIC,CAAD,IAAO;AACjCZ,IAAAA,cAAc,CAACY,CAAC,CAACC,MAAF,CAASC,SAAV,CAAd;AACAR,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,GAHD;;AAKA,MAAIS,uBAAJ;;AAEA,MAAIV,eAAe,IAAIN,WAAvB,EAAoC;AAChC,QAAII,WAAW,CAACa,MAAZ,GAAqB,CAAzB,EAA4B;AACxBD,MAAAA,uBAAuB,gBACnB;AAAA,kBACKZ,WAAW,CAACc,GAAZ,CAAgB,CAACC,UAAD,EAAaC,GAAb,KAAqB;AAClC,gBAAMC,IAAI,GAAGF,UAAU,CAACE,IAAxB;AACA,cAAIC,gBAAJ;;AACA,cAAGtB,WAAW,CAACiB,MAAZ,IAAsB,CAAzB,EAA4B;AACxBK,YAAAA,gBAAgB,GAAG,CAAnB;AACA,kBAAMC,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAWH,IAAI,CAAC,CAAD,CAAf,CAAlB;AACH,WAHD,MAIK;AACDC,YAAAA,gBAAgB,GAAGD,IAAI,CAACI,OAAL,CAAazB,WAAb,CAAnB;AACH;;AACD0B,UAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAYL,gBAAZ;AACA,8BACI;AAAI,YAAA,SAAS,EAAC,YAAd;AAAuE,YAAA,OAAO,EAAEV,qBAAhF;AAAA,mCACI;AAAA,wBAAIS;AAAJ;AAAA;AAAA;AAAA;AAAA;AADJ,aAAiC,GAAEF,UAAU,CAACE,IAAK,IAAGF,UAAU,CAACS,EAAG,EAApE;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SAjBA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAsBH,KAvBD,MAwBK;AACDZ,MAAAA,uBAAuB,gBACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADR;AAGH;AACJ;;AAED,QAAMa,iBAAiB,GAAIhB,CAAD,IAAO;AAC7Ba,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAlB,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAGI,CAAC,CAACC,MAAF,CAASgB,KAAT,IAAkB,EAArB,EAAyB;AACrBnB,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AAEAb,MAAAA,KAAK,CAACiC,GAAN,CAAU,WAAV,EAAuB;AAAEC,QAAAA,MAAM,EAAE;AAC7BC,UAAAA,MAAM,EAAEpB,CAAC,CAACC,MAAF,CAASgB;AADY;AAAV,OAAvB,EAGCI,IAHD,CAGMC,IAAI,IAAI;AACd,cAAMjC,WAAW,GAAGiC,IAAI,CAACC,IAAL,CAAUC,QAA9B;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAYzB,WAAZ;AAEAC,QAAAA,cAAc,CAACD,WAAD,CAAd;AAEA,cAAMoC,iBAAiB,GAAGpC,WAAW,CAACqC,IAAZ,CAAiB,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAACnB,IAAF,CAAOqB,aAAP,CAAqBD,CAAC,CAACpB,IAAvB,CAA1B,CAA1B;AAEAhB,QAAAA,cAAc,CAACiC,iBAAD,CAAd;AACA7B,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACC,OAdD;AAeH,KAlBD,MAkBOI,gBAAgB,CAAC,IAAD,CAAhB;;AAEPV,IAAAA,cAAc,CAACY,CAAC,CAACC,MAAF,CAASgB,KAAV,CAAd;AAEH,GAzBD;;AA2BA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,SAAS,EAAC,YAAjB;AAA8B,MAAA,IAAI,EAAC,QAAnC;AAA4C,MAAA,KAAK,EAAE9B,WAAnD;AAAgE,MAAA,QAAQ,EAAE6B,iBAA1E;AAA6F,MAAA,WAAW,EAAC;AAAzG;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGK,CAACnB,aAAD,IAAkBM,uBAHvB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAlFQjB,Y;;KAAAA,Y;AAoFT,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport './Autocomplete.css'\n\nfunction Autocomplete() {\n    const [searchValue, setSearchValue] = useState('')\n    const [allStudents, setAllStudents] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    // const [suggestionLength, setSuggestionLength] = useState(0)\n    const [showSuggestions, setShowSuggestions] = useState(false)\n    const [apiDone, setApiDone] = useState(false)\n    const [searchCleared, setSearchCleared] = useState(false)\n\n    const handleSuggestionClick = (e) => {\n        setSearchValue(e.target.innerText)\n        setShowSuggestions(false)\n    }\n\n    let autocompleteSuggestions\n\n    if (showSuggestions && searchValue) {\n        if (suggestions.length > 0) {\n            autocompleteSuggestions = (\n                <ul>\n                    {suggestions.map((suggestion, idx) => {\n                        const name = suggestion.name\n                        let indexOfSubstring\n                        if(searchValue.length == 1) {\n                            indexOfSubstring = 0\n                            const splitName = name.split(name[0])\n                        }\n                        else {\n                            indexOfSubstring = name.indexOf(searchValue)\n                        }\n                        console.log(splitName)\n                        console.log(indexOfSubstring)\n                        return (\n                            <li className=\"suggestion\" key={`${suggestion.name}-${suggestion.id}`} onClick={handleSuggestionClick}>\n                                <b>{name}</b>\n                            </li>\n                        )\n                    })}\n                </ul>\n            )\n        }\n        else {\n            autocompleteSuggestions = (\n                    <p>No Matches</p>\n            )\n        }\n    }\n\n    const handleInputChange = (e) => {\n        console.log(\"start\")\n        setApiDone(false)\n        if(e.target.value != \"\") {\n            setSearchCleared(false)\n\n            axios.get('/students', { params: {\n                search: e.target.value\n            }})\n            .then(resp => {\n            const allStudents = resp.data.students\n            console.log(allStudents)\n            \n            setAllStudents(allStudents)\n\n            const searchSuggestions = allStudents.sort((a,b) => a.name.localeCompare(b.name))\n\n            setSuggestions(searchSuggestions)\n            setApiDone(true)\n            setShowSuggestions(true)\n            })\n        } else setSearchCleared(true)\n\n        setSearchValue(e.target.value)\n\n    }\n\n    return (\n        <div className=\"search-box\">\n            <h1 className=\"title\">Student Search</h1>\n            <input className='search-bar' type=\"search\" value={searchValue} onChange={handleInputChange} placeholder=\"Search\"></input>\n            {!searchCleared && autocompleteSuggestions}\n        </div>\n    )\n}\n\nexport default Autocomplete"]},"metadata":{},"sourceType":"module"}