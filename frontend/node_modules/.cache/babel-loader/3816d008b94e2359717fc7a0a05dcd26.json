{"ast":null,"code":"var _jsxFileName = \"/home/danny/Coding Projects/autocomplete-app/frontend/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './Autocomplete.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Autocomplete() {\n  _s();\n\n  const [searchValue, setSearchValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [apiDone, setApiDone] = useState(false);\n\n  const handleSuggestionClick = e => {\n    setSearchValue(e.target.dataset.name);\n    setShowSuggestions(false);\n  };\n\n  const handleInputChange = e => {\n    console.log(\"start\");\n    setApiDone(false);\n    setShowSuggestions(true);\n    setSearchValue(e.target.value);\n\n    if (e.target.value !== \"\") {\n      axios.get('/students', {\n        params: {\n          search: e.target.value\n        }\n      }).then(resp => {\n        const allStudents = resp.data;\n        console.log(resp.data);\n        setSuggestions(allStudents);\n        setApiDone(true);\n      });\n    } else {\n      setSuggestions([]);\n      setShowSuggestions(false);\n    }\n  };\n\n  const test123 = () => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: suggestions.map((suggestion, idx) => {\n        const firstName = suggestion.firstName;\n        const lastName = suggestion.lastName;\n        const fullName = firstName.concat(\" \", lastName);\n\n        if (fullName.toLowerCase().indexOf(searchValue.toLowerCase()) === 0) {\n          console.log(fullName);\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            \"data-name\": `${suggestion.firstName} ${suggestion.lastName}`,\n            className: \"suggestion\",\n            onClick: handleSuggestionClick,\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: fullName.slice(0, searchValue.length)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 33\n            }, this), fullName.slice(searchValue.length), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"grade\",\n              children: [\"- \", suggestion.grade, \"th grade\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 116\n            }, this)]\n          }, `${suggestion.firstName}-${suggestion.id}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            \"data-name\": `${suggestion.firstName} ${suggestion.lastName}`,\n            className: \"suggestion\",\n            onClick: handleSuggestionClick,\n            children: [firstName, \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: lastName.slice(0, searchValue.length)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 45\n            }, this), lastName.slice(searchValue.length), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"grade\",\n              children: [\"- \", suggestion.grade, \"th grade\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 128\n            }, this)]\n          }, `${suggestion.firstName}-${suggestion.id}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  };\n\n  let autocompleteSuggestions;\n\n  if (showSuggestions && searchValue) {\n    if (suggestions.length > 0) {\n      autocompleteSuggestions = test123();\n    } else if (suggestions.length === 0 && apiDone) {\n      autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Matches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Student Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search-bar\",\n      type: \"search\",\n      value: searchValue,\n      onChange: handleInputChange,\n      placeholder: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), autocompleteSuggestions]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Autocomplete, \"LEHX+HnjU/L4GeI1CEA8ypV5bqQ=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/home/danny/Coding Projects/autocomplete-app/frontend/src/components/Autocomplete.js"],"names":["React","useState","axios","Autocomplete","searchValue","setSearchValue","suggestions","setSuggestions","showSuggestions","setShowSuggestions","apiDone","setApiDone","handleSuggestionClick","e","target","dataset","name","handleInputChange","console","log","value","get","params","search","then","resp","allStudents","data","test123","map","suggestion","idx","firstName","lastName","fullName","concat","toLowerCase","indexOf","slice","length","grade","id","autocompleteSuggestions"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport axios from 'axios'\nimport './Autocomplete.css'\n\nfunction Autocomplete() {\n    const [searchValue, setSearchValue] = useState('')\n    const [suggestions, setSuggestions] = useState([])\n    const [showSuggestions, setShowSuggestions] = useState(false)\n    const [apiDone, setApiDone] = useState(false)\n\n    const handleSuggestionClick = (e) => {\n        setSearchValue(e.target.dataset.name)\n        setShowSuggestions(false)\n    }\n\n    const handleInputChange = (e) => {\n        console.log(\"start\")\n        setApiDone(false)\n        setShowSuggestions(true)\n        setSearchValue(e.target.value)\n\n        if(e.target.value !== \"\") {\n            axios.get('/students', { params: {\n                search: e.target.value\n            }})\n            .then(resp => {\n            const allStudents = resp.data\n            console.log(resp.data)\n            setSuggestions(allStudents)\n            setApiDone(true)\n            })\n        } else {\n            setSuggestions([])\n            setShowSuggestions(false)\n        }\n    }\n\n    const test123 = () => {\n        return (\n            <ul>\n                {suggestions.map((suggestion, idx) => {\n                    const firstName = suggestion.firstName\n                    const lastName = suggestion.lastName\n                    const fullName = firstName.concat(\" \", lastName)\n                    if(fullName.toLowerCase().indexOf(searchValue.toLowerCase()) === 0) {\n                        console.log(fullName)\n                        return (\n                            <li data-name={`${suggestion.firstName} ${suggestion.lastName}`} className=\"suggestion\" key={`${suggestion.firstName}-${suggestion.id}`} onClick={handleSuggestionClick}>\n                                <b>{fullName.slice(0, searchValue.length)}</b>{fullName.slice(searchValue.length)} <span className=\"grade\">- {suggestion.grade}th grade</span>\n                            </li>\n                        )\n                    }\n                    else {\n                        return (\n                            <li data-name={`${suggestion.firstName} ${suggestion.lastName}`} className=\"suggestion\" key={`${suggestion.firstName}-${suggestion.id}`} onClick={handleSuggestionClick}>\n                                {firstName} <b>{lastName.slice(0, searchValue.length)}</b>{lastName.slice(searchValue.length)} <span className=\"grade\">- {suggestion.grade}th grade</span>\n                            </li>\n                        )\n                    }\n                })}\n            </ul>\n        )\n    }\n\n    let autocompleteSuggestions\n\n    if (showSuggestions && searchValue) {\n        if (suggestions.length > 0) {\n            autocompleteSuggestions = test123()\n        }\n        else if(suggestions.length === 0 && apiDone) {\n            autocompleteSuggestions = (\n                    <p>No Matches</p>\n            )\n        }\n    }\n\n    return (\n        <div className=\"search-box\">\n            <h1 className=\"title\">Student Search</h1>\n            <input className='search-bar' type=\"search\" value={searchValue} onChange={handleInputChange} placeholder=\"Search\"></input>\n            {autocompleteSuggestions}\n        </div>\n    )\n}\n\nexport default Autocomplete"]},"metadata":{},"sourceType":"module"}