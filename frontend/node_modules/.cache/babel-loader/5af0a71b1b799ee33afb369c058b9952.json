{"ast":null,"code":"var _jsxFileName = \"/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Autocomplete.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Autocomplete() {\n  _s();\n\n  const [searchValue, setSearchValue] = useState('');\n  const [allStudents, setAllStudents] = useState([]);\n  const [suggestions, setSuggestions] = useState([]); // const [suggestionLength, setSuggestionLength] = useState(0)\n\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [apiDone, setApiDone] = useState(false);\n  const [searchCleared, setSearchCleared] = useState(false);\n\n  const handleSuggestionClick = e => {\n    setSearchValue(e.target.innerText);\n    setShowSuggestions(false);\n  };\n\n  const handleInputChange = e => {\n    console.log(\"start\");\n    setApiDone(false);\n\n    if (e.target.value !== \"\") {\n      axios.get('/students', {\n        params: {\n          search: e.target.value\n        }\n      }).then(resp => {\n        const allStudents = resp.data.students;\n        console.log(allStudents);\n        setAllStudents(allStudents);\n        const searchSuggestions = allStudents.sort((a, b) => a.name.localeCompare(b.name));\n        setSuggestions(searchSuggestions);\n        setApiDone(true);\n        setShowSuggestions(true);\n        var autocompleteSuggestions;\n\n        if (showSuggestions && searchValue) {\n          if (suggestions.length > 0) {\n            autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: suggestions.map((suggestion, idx) => {\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"suggestion\",\n                  onClick: handleSuggestionClick,\n                  children: `${suggestion.name}`\n                }, `${suggestion.name}-${suggestion.id}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 37\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 25\n            }, this);\n          } else {\n            autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No Matches\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this);\n          }\n        }\n      });\n    }\n\n    setSearchValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Student Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search-bar\",\n      type: \"search\",\n      value: searchValue,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), autocompleteSuggestions]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Autocomplete, \"PzHJUMP0dn4R3sHl8EeuCN4XBtA=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js"],"names":["React","useEffect","useState","axios","Autocomplete","searchValue","setSearchValue","allStudents","setAllStudents","suggestions","setSuggestions","showSuggestions","setShowSuggestions","apiDone","setApiDone","searchCleared","setSearchCleared","handleSuggestionClick","e","target","innerText","handleInputChange","console","log","value","get","params","search","then","resp","data","students","searchSuggestions","sort","a","b","name","localeCompare","autocompleteSuggestions","length","map","suggestion","idx","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport './Autocomplete.css'\n\nfunction Autocomplete() {\n    const [searchValue, setSearchValue] = useState('')\n    const [allStudents, setAllStudents] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    // const [suggestionLength, setSuggestionLength] = useState(0)\n    const [showSuggestions, setShowSuggestions] = useState(false)\n    const [apiDone, setApiDone] = useState(false)\n    const [searchCleared, setSearchCleared] = useState(false)\n\n    const handleSuggestionClick = (e) => {\n        setSearchValue(e.target.innerText)\n        setShowSuggestions(false)\n    }\n\n    const handleInputChange = (e) => {\n        console.log(\"start\")\n        setApiDone(false)\n        if(e.target.value !== \"\") {\n\n            axios.get('/students', { params: {\n                search: e.target.value\n            }})\n            .then(resp => {\n            const allStudents = resp.data.students\n            console.log(allStudents)\n            \n            setAllStudents(allStudents)\n\n            const searchSuggestions = allStudents.sort((a,b) => a.name.localeCompare(b.name))\n\n            setSuggestions(searchSuggestions)\n            setApiDone(true)\n            setShowSuggestions(true)\n\n            var autocompleteSuggestions\n\n            if (showSuggestions && searchValue) {\n                if (suggestions.length > 0) {\n                    autocompleteSuggestions = (\n                        <ul>\n                            {suggestions.map((suggestion, idx) => {\n                                return (\n                                    <li className=\"suggestion\" key={`${suggestion.name}-${suggestion.id}`} onClick={handleSuggestionClick}>{`${suggestion.name}`}</li>\n                                )\n                            })}\n                        </ul>\n                    )\n                }\n                else {\n                    autocompleteSuggestions = (\n                            <p>No Matches</p>\n                    )\n                }\n            }\n            })\n        }\n\n        setSearchValue(e.target.value)\n\n    }\n\n    return (\n        <div className=\"search-box\">\n            <h1 className=\"title\">Student Search</h1>\n            <input className='search-bar' type=\"search\" value={searchValue} onChange={handleInputChange}></input>\n            {autocompleteSuggestions}\n        </div>\n    )\n}\n\nexport default Autocomplete"]},"metadata":{},"sourceType":"module"}