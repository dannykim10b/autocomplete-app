{"ast":null,"code":"var _jsxFileName = \"/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Autocomplete.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Autocomplete() {\n  _s();\n\n  const [searchValue, setSearchValue] = useState('');\n  const [allStudents, setAllStudents] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [apiDone, setApiDone] = useState(false);\n  const [searchCleared, setSearchCleared] = useState(false);\n\n  const handleSuggestionClick = e => {\n    setSearchValue(e.target.innerText);\n    setShowSuggestions(false);\n  };\n\n  let autocompleteSuggestions;\n\n  if (showSuggestions && searchValue) {\n    if (suggestions.length > 0) {\n      autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: suggestions.map((suggestion, idx) => {\n          const firstName = suggestion.firstName;\n          const lastName = suggestion.lastName;\n          const fullName = firstName.concat(\" \", lastName);\n\n          if (fullName.toLowerCase().indexOf(searchValue.toLowerCase()) === 0) {\n            console.log(fullName);\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"suggestion\",\n              onClick: handleSuggestionClick,\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: fullName.slice(0, searchValue.length)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 37\n              }, this), fullName.slice(searchValue.length)]\n            }, `${suggestion.firstName}-${suggestion.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 33\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"suggestion\",\n              onClick: handleSuggestionClick,\n              children: [firstName, \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: lastName.slice(0, searchValue.length)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 49\n              }, this), lastName.slice(searchValue.length)]\n            }, `${suggestion.firstName}-${suggestion.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 33\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this);\n    } else if (suggestions.length === 0) {\n      autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n  const handleInputChange = e => {\n    console.log(\"start\");\n    setApiDone(false);\n    setShowSuggestions(true);\n    setSearchValue(e.target.value);\n    setSearchCleared(false);\n\n    if (e.target.value !== \"\") {\n      axios.get('/students', {\n        params: {\n          search: e.target.value\n        }\n      }).then(resp => {\n        const allStudents = resp.data.students;\n        console.log(allStudents);\n        setSuggestions(allStudents);\n        setApiDone(true);\n      });\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Student Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search-bar\",\n      type: \"search\",\n      value: searchValue,\n      onChange: handleInputChange,\n      placeholder: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), !searchCleared && autocompleteSuggestions]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Autocomplete, \"PzHJUMP0dn4R3sHl8EeuCN4XBtA=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js"],"names":["React","useEffect","useState","axios","Autocomplete","searchValue","setSearchValue","allStudents","setAllStudents","suggestions","setSuggestions","showSuggestions","setShowSuggestions","apiDone","setApiDone","searchCleared","setSearchCleared","handleSuggestionClick","e","target","innerText","autocompleteSuggestions","length","map","suggestion","idx","firstName","lastName","fullName","concat","toLowerCase","indexOf","console","log","slice","id","handleInputChange","value","get","params","search","then","resp","data","students"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport './Autocomplete.css'\n\nfunction Autocomplete() {\n    const [searchValue, setSearchValue] = useState('')\n    const [allStudents, setAllStudents] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    const [showSuggestions, setShowSuggestions] = useState(false)\n    const [apiDone, setApiDone] = useState(false)\n    const [searchCleared, setSearchCleared] = useState(false)\n\n    const handleSuggestionClick = (e) => {\n        setSearchValue(e.target.innerText)\n        setShowSuggestions(false)\n    }\n\n    let autocompleteSuggestions\n\n    if (showSuggestions && searchValue) {\n        if (suggestions.length > 0) {\n            autocompleteSuggestions = (\n                <ul>\n                    {suggestions.map((suggestion, idx) => {\n                        const firstName = suggestion.firstName\n                        const lastName = suggestion.lastName\n                        const fullName = firstName.concat(\" \", lastName)\n                        if(fullName.toLowerCase().indexOf(searchValue.toLowerCase()) === 0) {\n                            console.log(fullName)\n                            return (\n                                <li className=\"suggestion\" key={`${suggestion.firstName}-${suggestion.id}`} onClick={handleSuggestionClick}>\n                                    <b>{fullName.slice(0, searchValue.length)}</b>{fullName.slice(searchValue.length)}\n                                </li>\n                            )\n                        }\n                        else {\n                            return (\n                                <li className=\"suggestion\" key={`${suggestion.firstName}-${suggestion.id}`} onClick={handleSuggestionClick}>\n                                    {firstName} <b>{lastName.slice(0, searchValue.length)}</b>{lastName.slice(searchValue.length)}\n                                </li>\n                            )\n                        }\n                    })}\n                </ul>\n            )\n        }\n        else if(suggestions.length === 0) {\n            autocompleteSuggestions = (\n                    <p></p>\n            )\n        }\n    }\n\n    const handleInputChange = (e) => {\n        console.log(\"start\")\n        setApiDone(false)\n        setShowSuggestions(true)\n        setSearchValue(e.target.value)\n\n\n        setSearchCleared(false)\n\n        if(e.target.value !== \"\") {\n            axios.get('/students', { params: {\n                search: e.target.value\n            }})\n            .then(resp => {\n            const allStudents = resp.data.students\n            console.log(allStudents)\n    \n            setSuggestions(allStudents)\n            setApiDone(true)\n            })\n        } else {\n            setSuggestions([])\n        }\n\n\n    }\n\n    return (\n        <div className=\"search-box\">\n            <h1 className=\"title\">Student Search</h1>\n            <input className='search-bar' type=\"search\" value={searchValue} onChange={handleInputChange} placeholder=\"Search\"></input>\n            {!searchCleared && autocompleteSuggestions}\n        </div>\n    )\n}\n\nexport default Autocomplete"]},"metadata":{},"sourceType":"module"}