{"ast":null,"code":"var _jsxFileName = \"/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Autocomplete() {\n  _s();\n\n  const [searchValue, setSearchValue] = useState('');\n  const [allStudents, setAllStudents] = useState([]);\n  const [suggestions, setSuggestions] = useState([]); // const [suggestionLength, setSuggestionLength] = useState(0)\n\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  useEffect(() => {\n    axios.get('/students').then(resp => setAllStudents(resp.data.students));\n  }, []);\n\n  const handleSuggestionClick = e => {\n    setSearchValue(e.target.innerText);\n    setShowSuggestions(false);\n  };\n\n  let autocompleteSuggestions;\n\n  if (showSuggestions && searchValue) {\n    if (suggestions.length > 0) {\n      autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: suggestions.map((suggestion, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: handleSuggestionClick,\n            children: `${suggestion.firstName} ${suggestion.lastName}    ${suggestion.grade}th`\n          }, `${suggestion.firstName}-${suggestion.id}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this);\n    } else {\n      autocompleteSuggestions = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Matches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  const handleInputChange = e => {\n    // console.log(e.target.value)\n    // console.log(allStudents[1].firstName)\n    allStudents.sort((a, b) => a.firstName.localeCompare(b.firstName) || a.lastName.localeCompare(b.lastName));\n    const searchSuggestions = allStudents.filter(suggestion => suggestion.firstName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1 || suggestion.lastName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1);\n    setSearchValue(e.target.value);\n    setSuggestions(searchSuggestions);\n    setShowSuggestions(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"search\",\n      value: searchValue,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), autocompleteSuggestions, searchValue]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Autocomplete, \"9rXLVxQBMCMgz3LPUF342RMDS+Y=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/home/danny/Coding Projects/autocomplete-app/src/components/Autocomplete.js"],"names":["React","useEffect","useState","axios","Autocomplete","searchValue","setSearchValue","allStudents","setAllStudents","suggestions","setSuggestions","showSuggestions","setShowSuggestions","get","then","resp","data","students","handleSuggestionClick","e","target","innerText","autocompleteSuggestions","length","map","suggestion","idx","firstName","lastName","grade","id","handleInputChange","sort","a","b","localeCompare","searchSuggestions","filter","toLowerCase","indexOf","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nfunction Autocomplete() {\n    const [searchValue, setSearchValue] = useState('')\n    const [allStudents, setAllStudents] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    // const [suggestionLength, setSuggestionLength] = useState(0)\n    const [showSuggestions, setShowSuggestions] = useState(false)\n\n    useEffect(() => {\n        axios.get('/students')\n        .then(resp => setAllStudents(resp.data.students))\n    }, [])\n\n    const handleSuggestionClick = (e) => {\n        setSearchValue(e.target.innerText)\n        setShowSuggestions(false)\n    }\n\n\n    let autocompleteSuggestions\n\n    if (showSuggestions && searchValue) {\n        if (suggestions.length > 0) {\n            autocompleteSuggestions = (\n                <ul>\n                    {suggestions.map((suggestion, idx) => {\n                        return (\n                            <li key={`${suggestion.firstName}-${suggestion.id}`} onClick={handleSuggestionClick}>{`${suggestion.firstName} ${suggestion.lastName}    ${suggestion.grade}th`}</li>\n                        )\n                    })}\n                </ul>\n            )\n        }\n        else {\n            autocompleteSuggestions = (\n                <div>\n                    <p>No Matches</p>\n                </div>\n            )\n        }\n    }\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value)\n        // console.log(allStudents[1].firstName)\n        allStudents.sort((a,b) => a.firstName.localeCompare(b.firstName) || a.lastName.localeCompare(b.lastName))\n\n        const searchSuggestions = allStudents.filter(\n            suggestion => (\n                suggestion.firstName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1 || suggestion.lastName.toLowerCase().indexOf(e.target.value.toLowerCase()) > -1\n            )\n        )\n        setSearchValue(e.target.value)\n        setSuggestions(searchSuggestions)\n        setShowSuggestions(true)\n    }\n\n    return (\n        <div>\n            <input type=\"search\" value={searchValue} onChange={handleInputChange}></input>\n            {autocompleteSuggestions}\n            {searchValue}\n        </div>\n    )\n}\n\nexport default Autocomplete"]},"metadata":{},"sourceType":"module"}